tolower(substr(x[i], 2, nchar(x[i])))
)
}
}
x[i]
class(x[i])
x0
class(x0)
x0 != x[i]
class(x0 != x[i])
x0
x[i]
class(x[i])
class(x0)
all.equal(x0,x[i])
x0==x[i]
library(myR)
myR::formatText(NA,cap=30)
devtools::document()
library(myR)
x <- 'ENERGIZER BATTERY ALKALINE 0 NICKEL ULTRA PLUS AA'
if (class(x) != 'character') {
x <- as.character(x)
}
# loop through each string
for (i in seq(length(x))) {
# cap string
if (!is.null(cap)) {
x0 <- substr(x[i],1,cap-3)
# add ... if text was capped
if (!all.equal(x0,x[i])) {
x[i] <- paste0(x0, '...')
} else {x[i] <- x0}
}
# separate words
if (!is.null(sep_words)) {x[i] <- gsub(sep_words,' ',x[i])}
# capitalize
if (capitalize == 'all') {x[i] <- toupper(x[i])}
if (capitalize == 'none') {x[i] <- tolower(x[i])}
if (capitalize == 'first') {
x[i] <- paste0(
toupper(substr(x[i],1,1)),
tolower(substr(x[i], 2, nchar(x[i])))
)
}
}
x0
x[i]
?all.equal
all.equal(x0,x[i])
'NA'== 'NA'
x <- NA
# convert to string if it's not
if (class(x) != 'character') {
x <- as.character(x)
}
# loop through each string
for (i in seq(length(x))) {
# cap string
if (!is.null(cap)) {
x0 <- substr(x[i],1,cap-3)
# add ... if text was capped
if (x0 != x[i]) {
x[i] <- paste0(x0, '...')
} else {x[i] <- x0}
}
# separate words
if (!is.null(sep_words)) {x[i] <- gsub(sep_words,' ',x[i])}
# capitalize
if (capitalize == 'all') {x[i] <- toupper(x[i])}
if (capitalize == 'none') {x[i] <- tolower(x[i])}
if (capitalize == 'first') {
x[i] <- paste0(
toupper(substr(x[i],1,1)),
tolower(substr(x[i], 2, nchar(x[i])))
)
}
}
x0
class(x0)
x[i]
class(x[i])
x0[1]
x[i][1]
class(x[i][1])
x[i][1][1]
x0==x[i]
is.na(x0==x[i])
library(myR)
getQuery("select max(date_key) from dtmsal.wvfe_sales_order_dlvrd_eudw")
ds
installed.packages()
?installed.packages
a <- installed.packages()
names(a)
class(a)
colnames(a)
head(a[,1])
installed.packages()[,1]
library(myR)
?install.packages
library(myR)
library(myR)
library(myR)
pass <- yaml::yaml.load_file('../../.access_db.yaml')
pass <- yaml::yaml.load_file('../../.access_db.yaml')
library(myR)
pass <- yaml::yaml.load_file('../../.access_db.yaml')
pass <- yaml::yaml.load_file('../../.access_db.yaml')
pass <- yaml::yaml.load_file('../../.access_db.yaml')
pass
pass$EDWPDEV
source('~/R/myR/R/getQuery.R')
yaml::yaml.load_file(access_file)[['EDWPDEV']]
yaml::yaml.load_file('../../.access_db.yaml')[['EDWPDEV']]
yaml::yaml.load_file('../../.access_db.yaml')[['EDWPUAT']]
library(myR)
source('~/R/myR/R/getQuery.R')
getQuery("select month_key, sum(net_sales_value_euro) from dtmsal.wvfe_sales_order_dlvrd_eudw where business_unit_key in (47, 49, 50) and date_key >= to_date('2016-01-01','YYYY-MM-DD') group by month_key order by month_key", network_alias = 'EDWPUAT')
getQuery("select month_key, sum(net_sales_value_euro) from dtmsal.wvfe_sales_order_dlvrd_eudw where business_unit_key in (47, 49, 50) and date_key >= to_date('2016-01-01','YYYY-MM-DD') group by month_key order by month_key", network_alias = 'EDWPDEV')
getQuery("select month_key, sum(net_sales_value_euro) from dtmsal.wvfe_sales_order_dlvrd_eudw where business_unit_key in (47, 49, 50) and date_key >= to_date('2016-01-01','YYYY-MM-DD') group by month_key order by month_key", network_alias = 'EDWPUAT')
source('~/R/myR/R/getQuery.R')
source('~/R/myR/R/getQuery.R')
getQuery("select month_key, sum(net_sales_value_euro) from dtmsal.wvfe_sales_order_dlvrd_eudw where business_unit_key in (47, 49, 50) and date_key >= to_date('2016-01-01','YYYY-MM-DD') group by month_key order by month_key", network_alias = 'EDWPUAT')
getQuery("select month_key, sum(net_sales_value_euro) from dtmsal.wvfe_sales_order_dlvrd_eudw where business_unit_key in (47, 49, 50) and date_key >= to_date('2016-01-01','YYYY-MM-DD') group by month_key order by month_key", network_alias = 'EDWPUAT')
source('~/R/myR/R/getQuery.R')
getQuery("select month_key, sum(net_sales_value_euro) from dtmsal.wvfe_sales_order_dlvrd_eudw where business_unit_key in (47, 49, 50) and date_key >= to_date('2016-01-01','YYYY-MM-DD') group by month_key order by month_key", network_alias = 'EDWPUAT')
getQuery("select month_key, sum(net_sales_value_euro) from dtmsal.wvfe_sales_order_dlvrd_eudw where business_unit_key in (47, 49, 50) and date_key >= to_date('2016-01-01','YYYY-MM-DD') group by month_key order by month_key", network_alias = 'EDWPDEV')
getQuery("dtmbud.wvda_fiscal_period", network_alias = 'EDWPUAT')
ora_file = NULL
access_file = NULL
sample_table = 3
quiet = FALSE
network_alias='EDWPUAT'
# time process
time1 <- Sys.time()
# check if query_string is a file
file_exists <- file.exists(query_string)
# check if sample_table
if (length(strsplit(query_string,' ')[[1]]) == 1 & !file_exists) {
query_string <- sprintf(
"select * from %s where rownum < %d",
query_string,
sample_table
)
} else if (file_exists) { # check if query_string is file and read if so
query_string <- paste(readLines(query_string),collapse = '\n')
}
if (!quiet){
# print message
cat(query_string)
cat('\n')
}
print('querying data....')
# find ora file
if (is.null(ora_file)) {
if (file.exists('C:\\OracleClient\\tnsnames.ora')) {
ora_file <- 'C:\\OracleClient\\tnsnames.ora'
} else if (file.exists(paste0(Sys.getenv("HOME"),'/.tnsnames.ora'))) {
ora_file <- paste0(Sys.getenv("HOME"),'/.tnsnames.ora')
} else {
stop('Please provide an tnsnames.ora file location')
}
}
# find credentials file
if (is.null(access_file) & !is.list(access_file)) {
if (file.exists(paste0(Sys.getenv("HOME"),'/.access_db.yaml'))) {
access_file <- paste0(Sys.getenv("HOME"),'/.access_db.yaml')
} else {
stop('Please provide an .access_db.yaml file location')
}
}
# load file, if it's a string
if (is.character(access_file)) {
access_file <- yaml::yaml.load_file(access_file)[[network_alias]]
print(access_file)
}
# validate credentials
if (!is.list(access_file)) {
stop('Please provide a valid credentials file object')
} else if (sum(c('username','password') %in% names(access_file)) != 2) {
stop('Credentials file must contain fields <username> and <password>')
}
# read connection
dbname  <- utils::read.delim(ora_file)
dbname <- strwrap(paste(dbname[[1]], collapse = ''),1000)
# check if there are more than one connection and split, if so
db_split <- strsplit(dbname, ')))')[[1]]
if (length(db_split) > 1) {
id_network_alias <- grep(network_alias,db_split)
if (!length(id_network_alias)) {
stop('Network alias not found in tnsnames.ora file')
} else if (length(id_network_alias) > 1) {
stop('Multiple network alias found in tnsnames.ora file')
} else {
dbname <- paste0(db_split[id_network_alias], ')))')
}
}
# set driver
drv <- ROracle::Oracle()
query_string='network_alias'
query_string='dtmbud.wvda_fiscal_period'
# time process
time1 <- Sys.time()
# check if query_string is a file
file_exists <- file.exists(query_string)
# check if sample_table
if (length(strsplit(query_string,' ')[[1]]) == 1 & !file_exists) {
query_string <- sprintf(
"select * from %s where rownum < %d",
query_string,
sample_table
)
} else if (file_exists) { # check if query_string is file and read if so
query_string <- paste(readLines(query_string),collapse = '\n')
}
if (!quiet){
# print message
cat(query_string)
cat('\n')
}
print('querying data....')
# find ora file
if (is.null(ora_file)) {
if (file.exists('C:\\OracleClient\\tnsnames.ora')) {
ora_file <- 'C:\\OracleClient\\tnsnames.ora'
} else if (file.exists(paste0(Sys.getenv("HOME"),'/.tnsnames.ora'))) {
ora_file <- paste0(Sys.getenv("HOME"),'/.tnsnames.ora')
} else {
stop('Please provide an tnsnames.ora file location')
}
}
# find credentials file
if (is.null(access_file) & !is.list(access_file)) {
if (file.exists(paste0(Sys.getenv("HOME"),'/.access_db.yaml'))) {
access_file <- paste0(Sys.getenv("HOME"),'/.access_db.yaml')
} else {
stop('Please provide an .access_db.yaml file location')
}
}
# load file, if it's a string
if (is.character(access_file)) {
access_file <- yaml::yaml.load_file(access_file)[[network_alias]]
print(access_file)
}
# validate credentials
if (!is.list(access_file)) {
stop('Please provide a valid credentials file object')
} else if (sum(c('username','password') %in% names(access_file)) != 2) {
stop('Credentials file must contain fields <username> and <password>')
}
# read connection
dbname  <- utils::read.delim(ora_file)
dbname <- strwrap(paste(dbname[[1]], collapse = ''),1000)
# check if there are more than one connection and split, if so
db_split <- strsplit(dbname, ')))')[[1]]
if (length(db_split) > 1) {
id_network_alias <- grep(network_alias,db_split)
if (!length(id_network_alias)) {
stop('Network alias not found in tnsnames.ora file')
} else if (length(id_network_alias) > 1) {
stop('Multiple network alias found in tnsnames.ora file')
} else {
dbname <- paste0(db_split[id_network_alias], ')))')
}
}
# set driver
drv <- ROracle::Oracle()
drv
con <- ROracle::dbConnect(
drv,
username = access_file$username,
password = access_file$password,
dbname = dbname
)
access_file
dbname
con <- ROracle::dbConnect(
drv,
username = access_file$username,
password = access_file$password,
dbname = dbname
)
source('~/R/myR/R/getQuery.R')
source('~/R/myR/R/getQuery.R')
getQuery("dtmbud.wvda_fiscal_period", network_alias = 'EDWPUAT')
library(myR)
library(myR)
library(myR)
detach('package:myR',unload=T)
library(myR)
getQuery("dtmsal.wvfe_sales_order_dlvrd_eudw")
getQuery("dtmsal.wvfe_sales_order_dlvrd_eudw")
network_alias='EDWPPRD'
ora_file = NULL
access_file = NULL
query_string <- 'dtmsal.wvfe_sales_order_dlvrd_eudw'
sample_table = 3
quiet = FALSE
time1 <- Sys.time()
# check if query_string is a file
file_exists <- file.exists(query_string)
# check if sample_table
if (length(strsplit(query_string,' ')[[1]]) == 1 & !file_exists) {
query_string <- sprintf(
"select * from %s where rownum < %d",
query_string,
sample_table
)
} else if (file_exists) { # check if query_string is file and read if so
query_string <- paste(readLines(query_string),collapse = '\n')
}
if (!quiet){
# print message
cat(query_string)
cat('\n')
}
print('querying data....')
# find ora file
if (is.null(ora_file)) {
if (file.exists('C:\\OracleClient\\tnsnames.ora')) {
ora_file <- 'C:\\OracleClient\\tnsnames.ora'
} else if (file.exists(paste0(Sys.getenv("HOME"),'/.tnsnames.ora'))) {
ora_file <- paste0(Sys.getenv("HOME"),'/.tnsnames.ora')
} else {
stop('Please provide an tnsnames.ora file location')
}
}
# find credentials file
if (is.null(access_file) & !is.list(access_file)) {
if (file.exists(paste0(Sys.getenv("HOME"),'/.access_db.yaml'))) {
access_file <- paste0(Sys.getenv("HOME"),'/.access_db.yaml')
} else {
stop('Please provide an .access_db.yaml file location')
}
}
# load file, if it's a string
if (is.character(access_file)) {
access_file <- yaml::yaml.load_file(access_file)[[network_alias]]
print(access_file)
}
# validate credentials
if (!is.list(access_file)) {
stop('Please provide a valid credentials file object')
} else if (sum(c('username','password') %in% names(access_file)) != 2) {
stop('Credentials file must contain fields <username> and <password>')
}
# read connection
dbname  <- utils::read.delim(ora_file)
dbname <- strwrap(paste(dbname[[1]], collapse = ''),1000)
# check if there are more than one connection and split, if so
db_split <- strsplit(dbname, ')))')[[1]]
if (length(db_split) > 1) {
id_network_alias <- grep(network_alias,db_split)
if (!length(id_network_alias)) {
stop('Network alias not found in tnsnames.ora file')
} else if (length(id_network_alias) > 1) {
stop('Multiple network alias found in tnsnames.ora file')
} else {
dbname <- paste0(db_split[id_network_alias], ')))')
}
}
dbname
drv <- ROracle::Oracle()
access_file
con <- ROracle::dbConnect(
drv,
username = access_file$username,
password = access_file$password,
dbname = dbname
)
file.exists('C:\\OracleClient\\tnsnames.ora')
getQuery("dtmsal.wvfe_sales_order_dlvrd_eudw",network_alias = "EDWPDEV")
getQuery("dtmsal.wvfe_sales_order_dlvrd_eudw",network_alias = "EDWPPRD")
getQuery("dtmsal.wvfe_sales_order_dlvrd_eudw",network_alias = "EDWPPRD")
dbname  <- utils::read.delim(ora_file)
dbname <- strwrap(paste(dbname[[1]], collapse = ''),1000)
# check if there are more than one connection and split, if so
db_split <- strsplit(dbname, ')))')[[1]]
if (length(db_split) > 1) {
id_network_alias <- grep(network_alias,db_split)
if (!length(id_network_alias)) {
stop('Network alias not found in tnsnames.ora file')
} else if (length(id_network_alias) > 1) {
stop('Multiple network alias found in tnsnames.ora file')
} else {
dbname <- paste0(db_split[id_network_alias], ')))')
}
}
dbname
dbname1=dbname
dbname  <- utils::read.delim(ora_file)
dbname <- strwrap(paste(dbname[[1]], collapse = ''),1000)
# check if there are more than one connection and split, if so
db_split <- strsplit(dbname, ')))')[[1]]
if (length(db_split) > 1) {
id_network_alias <- grep(network_alias,db_split)
if (!length(id_network_alias)) {
stop('Network alias not found in tnsnames.ora file')
} else if (length(id_network_alias) > 1) {
stop('Multiple network alias found in tnsnames.ora file')
} else {
dbname <- paste0(db_split[id_network_alias], ')))')
}
}
dbname
dbname1
dbname  <- utils::read.delim(ora_file)
dbname <- strwrap(paste(dbname[[1]], collapse = ''),1000)
db_split <- strsplit(dbname, ')))')[[1]]
db_split
dbname
dbname  <- utils::read.delim(ora_file)
dbname
readLines(ora_file)
dbname=readLines(ora_file)
strwrap(paste(dbname[[1]], collapse = ''),1000)
strwrap(paste(dbname, collapse = ''),1000)
dbname <- readLines(ora_file)
# replace empty items by empty line
dbname[nchar(dbname) == 0] <- '\n'
dbname
paste(dbname, collapse = '')
# read connection
dbname <- readLines(ora_file)
# replace empty items by split character
dbname[nchar(dbname) == 0] <- '***'
# now collapse text
dbname <- strwrap(paste(dbname, collapse = ''),1000)
dbname
db_split <- strsplit(dbname, '***')[[1]]
# read connection
dbname <- readLines(ora_file)
# replace empty items by split character
dbname[nchar(dbname) == 0] <- '<SPLIT>'
# now collapse text
dbname <- strwrap(paste(dbname, collapse = ''),1000)
# check if there are more than one connection and split, if so
db_split <- strsplit(dbname, '<SPLIT>')[[1]]
db_split
id_network_alias <- grep(network_alias,db_split)
id_network_alias
db_split[id_network_alias]
library(stringr)
?grep
a <- db_split[id_network_alias]
regexpr('[(].*[)]',a)
grepl('[(].*[)]',a)
grep('[(].*[)]',a)
b <- regexpr('[(].*[)]',a)
b
names(b)
substr(a, 10, 157)
gregexpr('[(].*[)]',a)
gregexpr('[)]',a)
dbname
dbname <- db_split[id_network_alias]
substr(
dbname,
grep('[(]',dbname)[1],
max(grep('[)]',dbname))
)
grep('[(]',dbname)
grep('(',dbname)
dbname
grep('[(]',dbname)
match('[(]',dbname)
match(dbname,'[(]')
match(dbname,'(')
regexpr('[(]',dbname)
gregexpr('[(]',dbname)
substr(
dbname,
regexpr('[(]',dbname),
max(gregexpr('[)]',dbname)[[1]])
)
library(myR)
detach('package:myR',unload=T)
library(myR)
getQuery("dtmsal.wvfe_sales_order_dlvrd_eudw")
library(myR)
access_file <- paste0(Sys.getenv("HOME"),'/.access_db.yaml')
access_file <- yaml::yaml.load_file(access_file)
access_file
network_alias <- names(access_file)[1]
network_alias
dbname
ora_file <- 'C:\\OracleClient\\tnsnames.ora'
dbname <- readLines(ora_file)
dbname
dbname[nchar(dbname) == 0] <- '<SPLIT>'
# now collapse text
dbname <- strwrap(paste(dbname, collapse = ''),1000)
# check if there are more than one connection and split, if so
db_split <- strsplit(dbname, '<SPLIT>')[[1]]
id_network_alias <- grep(network_alias,db_split)
dbname <- db_split[id_network_alias]
# keep only what's in parentesis
dbname <- substr(
dbname,
regexpr('[(]',dbname),
max(gregexpr('[)]',dbname)[[1]])
)
dbname
devtools::document()
library(myR)
detach('package:QPV_utils',unload=T)
detach('package:myR',unload=T)
devtools::document()
devtools::document()
library(QPVutils)
?getQuery
