'Š'='S', 'š'='s', 'Ž'='Z', 'ž'='z', 'À'='A', 'Á'='A', 'Â'='A', 'Ã'='A',
'Ä'='A', 'Å'='A', 'Æ'='A', 'Ç'='C', 'È'='E', 'É'='E','Ê'='E', 'Ë'='E',
'Ì'='I', 'Í'='I', 'Î'='I', 'Ï'='I', 'Ñ'='N', 'Ò'='O', 'Ó'='O', 'Ô'='O',
'Õ'='O', 'Ö'='O', 'Ø'='O', 'Ù'='U', 'Ú'='U', 'Û'='U', 'Ü'='U', 'Ý'='Y',
'Þ'='B', 'ß'='S', 'à'='a', 'á'='a', 'â'='a', 'ã'='a', 'ä'='a', 'å'='a',
'æ'='a', 'ç'='c', 'è'='e', 'é'='e', 'ê'='e', 'ë'='e', 'ì'='i', 'í'='i',
'î'='i', 'ï'='i', 'ð'='o', 'ñ'='n', 'ò'='o', 'ó'='o', 'ô'='o', 'õ'='o',
'ö'='o', 'ø'='o', 'ù'='u', 'ú'='u', 'û'='u', 'ý'='y', 'ý'='y', 'þ'='b',
'ÿ'='y'
)
nchar(paste(names(unwanted_chars), collapse=''))
nchar(paste(unwanted_chars, collapse=''))
x <- "EAMINFINANCIENBELASTINGDIENST"
unwanted_chars <-  list(
'Š'='S', 'š'='s', 'Ž'='Z', 'ž'='z', 'À'='A', 'Á'='A', 'Â'='A', 'Ã'='A',
'Ä'='A', 'Å'='A', 'Æ'='A', 'Ç'='C', 'È'='E', 'É'='E','Ê'='E', 'Ë'='E',
'Ì'='I', 'Í'='I', 'Î'='I', 'Ï'='I', 'Ñ'='N', 'Ò'='O', 'Ó'='O', 'Ô'='O',
'Õ'='O', 'Ö'='O', 'Ø'='O', 'Ù'='U', 'Ú'='U', 'Û'='U', 'Ü'='U', 'Ý'='Y',
'Þ'='B', 'ß'='S', 'à'='a', 'á'='a', 'â'='a', 'ã'='a', 'ä'='a', 'å'='a',
'æ'='a', 'ç'='c', 'è'='e', 'é'='e', 'ê'='e', 'ë'='e', 'ì'='i', 'í'='i',
'î'='i', 'ï'='i', 'ð'='o', 'ñ'='n', 'ò'='o', 'ó'='o', 'ô'='o', 'õ'='o',
'ö'='o', 'ø'='o', 'ù'='u', 'ú'='u', 'û'='u', 'ý'='y', 'ý'='y', 'þ'='b',
'ÿ'='y'
)
# keep only alphanumeric charactes
x <- gsub('[^[:alnum:]]','',x)
x <- iconv(x, to='ASCII//TRANSLIT')
x <- chartr(paste(names(unwanted_chars), collapse=''),
paste(unwanted_chars, collapse=''),
x)
x
library(myR)
cn
keepAlphaNum("EAMINFINANCIENBELASTINGDIENST")
cn <- "EAMINFINANCIENBELASTINGDIENST"
iconv(cn, to='ASCII/TRANSLIT')
x
x <- cn
x
iconv(x, to='ASCII//TRANSLIT')
x <- "EAMINFINANCIËNBELASTINGDIENST"
iconv(x, to='ASCII//TRANSLIT')
library(myR)
keepAlphaNum(x)
devtools::document()
library(myR)
setwd('../packages/')
untar('xtable_1.8-2.tar.gz')
pack <- available.packages()
pack['xtable',]
pack['xtable','Depends']
pack['ggtable2','Depends']
pack['ggplot2','Depends']
pack['RCurl','Depends']
pack['knitr','Depends']
pack['render','Depends']
pack['rmarkdown','Depends']
pack['plyr','Depends']
pack['reshape2','Depends']
pack['reshape','Depends']
pack['tibble','Depends']
remove.package('rmarkdown')
remove.packages('rmarkdown')
?remove.packages
install.packages('rmarkdown')
remove.packages(c('RCurl','bitops','methods'))
library(RCurl)
install.packages('RCurl_1.95-4.8.tar.gz',report=NULL, type='source')
library(bitops)
install.packages('RCurl_1.95-4.8.tar.gz',repos=NULL, type='source')
untar('RCurl_1.95-4.8.tar.gz')
packs <- grep('tar.gz$',dir(), value=T)
packs
?untar
untar('RCurl_1.95-4.8.tar.gz','DESCRIPTION')
untar('RCurl_1.95-4.8.tar.gz','DESCRIPTION')
untar('RCurl_1.95-4.8.tar.gz',files='DESCRIPTION')
dir('RCurl')
untar('RCurl_1.95-4.8.tar.gz',files='RCurl/DESCRIPTION')
dir('RCurl')
untar('RCurl_1.95-4.8.tar.gz',files='RCurl_1.95-4.8.tar.gz/DESCRIPTION')
dir('RCurl')
p='RCurl_1.95-4.8.tar.gz'
untar(p, exdir='temp')
system(sprintf('tar -xzvf %s DESCRIPTION',p))
system(sprintf('tar tf %s | grep DESCRIPTION',p))
system(sprintf('tar -ztf %s',p))
packs <- available.packages()
nrow(packs)
saveRDS(packs,'available_packages.rds')
dep_pack <- readRDS('available_packages.rds')
pack_name <- strsplit(p,'_')[[1]][1]
pack_name
dep_pack[pack_name,'Depends']
dep_pack['ggplot2','Depends']
strsaplit(dep_pack['ggplot2','Depends'],',')
strsplit(dep_pack['ggplot2','Depends'],',')
strsplit(dep_pack['ggplot2','Depends'],',')[[1]][-1]
a <- strsplit(dep_pack['ggplot2','Depends'],',')[[1]][-1]
length(a)
p
library(RCurl)
pwd <- getwd()
pack_name
install.packages(pack_name, contriburl=sprintf("file://%s",pwd))
pwd
require(tools)
write_PACKAGES(pwd)
dir
dir()
install.packages(pack_name, contriburl=sprintf("file://%s",pwd))
install.packages(pack_name, contriburl=sprintf("file://%s",pwd))
setwd('C:\Users\CabHe001\Downloads')
setwd("C:\Users\CabHe001\Downloads")
setwd('../..')
pwd
setwd('../..')
pwd
getwd()
setwd('../Users/CabHe001/Downloads/')
setwd('packages/')
pwd <- getwd()
install.packages(pack_name, contriburl=sprintf("file://%s",pwd))
install.packages(pack_name, contrib.url=sprintf("file://%s",pwd))
install.packages(pack_name, contrib.url='///')
install.packages(pack_name, contrib.url='//')
setwd('../')
install.packages(pack_name, contrib.url='///packages/')
install.packages(pack_name, contrib.url='///packages')
install.packages(pack_name, contriburl='///packages')
install.packages(pack_name, contriburl='///packages/')
install.packages(pack_name, contriburl='//packages')
pwd
install.packages(pack_name, contriburl='file://C:/Users/CabHe001/Downloads/packages/')
install.packages(pack_name, contriburl='file://C:/Users/CabHe001/Downloads/packages')
set('../../../..')
wdet('../../../..')
setwd('../../../..')
getWd()
getwd()
setwd('..')
getwd()
setwd('Data/U')
setwd('Data/CabHe001/My Documents/R/packages/)
''
'
setwd('Data/CabHe001/My Documents/R/packages/')
a <- try(install.packages('RCurl_1.95-4.8.tar.gz', repos=NULL, type='source'))
a
?try
2+2;a <- try(install.packages('RCurl_1.95-4.8.tar.gz', repos=NULL, type='source')):print('hu')
2+2;a <- install.packages('RCurl_1.95-4.8.tar.gz', repos=NULL, type='source'):print('hu')
for (p in seq(2)) {install.packages('RCurl_1.95-4.8.tar.gz', repos=NULL, type='source')}
a <- try(install.packages('vcd'))
a
a <- try(install.packages('vcdsd'))
a
a <- tryCatch(install.packages('vcdsd'))
a
packs
packs <- grep('tar.gz$',dir(), value=T)
packs
p
packs[!packs==p]
packs[!p %in% packs]
packs[!packs %in% p]
which(!packs %in% p)
which(packs %in% p)
packs[-packs %in% p]
p
p='RCurl_1.95-4.8.tar.gz'
packs[!packs==p]
source('install_packages.R')
pack_name
source('install_packages.R')
packs
count
source('install_packages.R')
source('install_packages.R')
packs
f <- yaml::yaml.load('../../.access_db.yaml')
f
f <- yaml::yaml.load_file('../../.access_db.yaml')
f
yaml::yaml.load_file('../../.access_db.yaml')
yaml::yaml.load_file('../../.access_db.yaml')
yaml::yaml.load_file('../../.access_db.yaml')
yaml::yaml.load_file('../../.access_db.yaml')
yaml::yaml.load_file('../../.access_db.yaml')
yaml::yaml.load_file('../../.access_db.yaml')
yaml::yaml.load_file('../../.access_db.yaml')
yaml::yaml.load_file('../../.access_db.yaml')
yaml::yaml.load_file('../../.access_db.yaml')
a <- yaml::yaml.load_file('../../.access_db.yaml')
class(a)
access_file <- paste0(Sys.getenv("HOME"),'/.access_db.yaml')
access_file <- yaml::yaml.load_file(access_file)
access_file
file.exists(access_file)
S
access_file <- paste0(Sys.getenv("HOME"),'/.access_db.yaml')
file.exists(access_file)
access_file <- yaml::yaml.load_file(access_file)
access_file$username
c('username','password') %in% names(access_file)
sum(c('username','password') %in% names(access_file))
devtools::document()
library(myR)
access_file = NULL
# get credentials
if (is.null(access_file)) {
if (file.exists(paste0(Sys.getenv("HOME"),'/.access_db.yaml'))) {
access_file <- paste0(Sys.getenv("HOME"),'/.access_db.yaml')
} else {
stop('Please provide a path to the yaml credentials file location')
}
}
# check if access_file is a list object and read yaml file if not
if (!is.list(access_file)) {
if (file.exists(access_file)){
access_file <- yaml::yaml.load_file(access_file)
} else {
stop('Please provide a valid path to the credentials file')
}
}
access_file
access_file$username
access_file$password
source('~/R/myR/R/getQuery.R')
rm(list=ls())
source('~/R/myR/R/getQuery.R')
getQuery('ce_w.wtdh_customer_sales')
source('~/R/myR/R/getQuery.R')
getQuery('ce_w.wtdh_customer_sales')
library(myR)
getQuery("ce_w.wtdh_customer_sales")
ora_file = NULL
access_file = NULL
query_string <- 'ce_w.wtdh_customer_sales'
time1 <- Sys.time()
# check if query_string is a file
file_exists <- file.exists(query_string)
# check if sample_table
if (length(strsplit(query_string,' ')[[1]]) == 1 & !file_exists) {
query_string <- sprintf(
"select * from %s where rownum < %d",
query_string,
sample_table
)
} else if (file_exists) { # check if query_string is file and read if so
query_string <- paste(readLines(query_string),collapse = '\n')
}
if (!quiet){
# print message
cat(query_string)
cat('\n')
}
print('querying data....')
# find ora file
if (is.null(ora_file)) {
if (file.exists('C:\\OracleClient\\tnsnames.ora')) {
ora_file <- 'C:\\OracleClient\\tnsnames.ora'
} else if (file.exists(paste0(Sys.getenv("HOME"),'/.tnsnames.ora'))) {
ora_file <- paste0(Sys.getenv("HOME"),'/.tnsnames.ora')
} else {
error('Please provide an tnsnames.ora file location')
}
}
# read connection
dbname  <- utils::read.delim(ora_file)
dbname <- strwrap(paste(dbname[[1]], collapse = ''),1000)
# set driver
drv <- ROracle::Oracle()
# get credentials
if (is.null(access_file)) {
if (file.exists(paste0(Sys.getenv("HOME"),'/.access_db.yaml'))) {
access_file <- paste0(Sys.getenv("HOME"),'/.access_db.yaml')
} else {
stop('Please provide a path to the yaml credentials file location')
}
}
# check if access_file is a list object and read yaml file if not
if (!is.list(access_file)) {
if (file.exists(access_file)){
access_file <- yaml::yaml.load_file(access_file)
} else {
stop('Please provide a valid path to the credentials file')
}
}
# check if required fields are present
if (sum(c('username','password') %in% names(access_file)) != 2) {
stop('Fields <username> and <password> must be present in the credentials')
}
print(access_file$username)
print(access_file$password)
drv
dbname
con <- ROracle::dbConnect(
drv,
username = access_file$username,
password = access_file$password,
dbname = dbname
)
setwd('../')
untar('myR_0.1.0.tar.gz')
yaml::yaml.load_file('../../.access_db.yaml')
ora_file <- 'C:\\OracleClient\\tnsnames.ora'
dbname  <- utils::read.delim(ora_file)
dbname
dbname  <- utils::read.delim(ora_file)
dbname
grep('#-',dbname)
dbname[9]
dbname[9,1]
dbname[9,1]
dbname[8,1]
grep('#-',dbname[,1])
dbname[seq(grep('#-',dbname[,1])),]
dbname[seq(grep('#-',dbname[,1]))-1,]
dbname[seq(grep('#-#',dbname[,1]))-1,]
dbname <- dbname[seq(grep('#-',dbname[,1]))-1,]
dbname
strwrap(paste(dbname[[1]], collapse = ''),1000)
dbname  <- utils::read.delim(ora_file)
strwrap(paste(dbname[[1]], collapse = ''),1000)
dbname  <- utils::read.delim(ora_file)
strwrap(paste(dbname[[1]], collapse = ''),1000)
a <- strwrap(paste(dbname[[1]], collapse = ''),1000)
strsplit(a,')))')
access_file <- paste0(Sys.getenv("HOME"),'/.access_file.yaml')
yaml::yaml.load_file(access_file)
access_file
access_file <- paste0(Sys.getenv("HOME"),'/.access_db.yaml')
yaml::yaml.load_file(access_file)
db_split
db_split <- strsplit(dbname, ')))')[[1]]
dbname  <- utils::read.delim(ora_file)
dbname <- strwrap(paste(dbname[[1]], collapse = ''),1000)
db_split <- strsplit(dbname, ')))')[[1]]
db_split
network_alias = 'EDWPDEV'
grepl(db_split, network_alias)
db_split
grepl(network_alias,db_split)
grep(network_alias,db_split)
dbname  <- utils::read.delim(ora_file)
dbname <- strwrap(paste(dbname[[1]], collapse = ''),1000)
# check if there are more than one connection and split, if so
db_split <- strsplit(dbname, ')))')[[1]]
if (length(db_split) > 1) {
id_network_alias <- grep(network_alias,db_split)
if (!length(id_network_alias)) {
stop('Network alias not found in tnsnames.ora file')
} else if (length(id_network_alias) > 1) {
stop('Multiple network alias found in tnsnames.ora file')
} else {
dbname <- paste0(db_split[id_network_alias], ')))')
}
}
dbname
access_file
access_file <- yaml::yaml.load_file(access_file)
drv <- ROracle::Oracle()
# make connection
con <- ROracle::dbConnect(
drv,
username = access_file$username,
password = access_file$password,
dbname = dbname
)
devtools::document()
library(myR)
file.exists(paste0(Sys.getenv("HOME"),'/.access_db.yaml'))
access_file <- paste0(Sys.getenv("HOME"),'/.access_db.yaml')
is.character(access_file)
access_file <- yaml::yaml.load_file(access_file)
!is.list(access_file)
devtools::document()
library(myR)
library(myR)
getQuery("all_views")
getQuery("select all_views")
getQuery("select * from all_views")
getQuery("select view_name from all_views")
a <- getQuery("select view_name from all_views")
a <- getQuery("select view_name from all_views where view_name like 'wv%'")
a
a <- getQuery("select view_name from all_views where view_name like 'WV%'")
a
getQuery("dtmsal.wvdh_product")
devtools::document()
library(myR)
source('~/R/myR/R/textUtils.R')
library(myR)
class(try(2+d))
x <- NA
# convert to string if it's not
if (class(x) != 'character') {
x <- as.character(x)
}
x
cap=30
capitalize = 'first'
sep_words = '_'
# loop through each string
for (i in seq(length(x))) {
# cap string
if (!is.null(cap)) {
x0 <- substr(x[i],1,cap-3)
# add ... if text was capped
if (x0 != x[i]) {
x[i] <- paste0(x0, '...')
} else {x[i] <- x0}
}
# separate words
if (!is.null(sep_words)) {x[i] <- gsub(sep_words,' ',x[i])}
# capitalize
if (capitalize == 'all') {x[i] <- toupper(x[i])}
if (capitalize == 'none') {x[i] <- tolower(x[i])}
if (capitalize == 'first') {
x[i] <- paste0(
toupper(substr(x[i],1,1)),
tolower(substr(x[i], 2, nchar(x[i])))
)
}
}
x[i]
class(x[i])
x0
class(x0)
x0 != x[i]
class(x0 != x[i])
x0
x[i]
class(x[i])
class(x0)
all.equal(x0,x[i])
x0==x[i]
library(myR)
myR::formatText(NA,cap=30)
devtools::document()
library(myR)
x <- 'ENERGIZER BATTERY ALKALINE 0 NICKEL ULTRA PLUS AA'
if (class(x) != 'character') {
x <- as.character(x)
}
# loop through each string
for (i in seq(length(x))) {
# cap string
if (!is.null(cap)) {
x0 <- substr(x[i],1,cap-3)
# add ... if text was capped
if (!all.equal(x0,x[i])) {
x[i] <- paste0(x0, '...')
} else {x[i] <- x0}
}
# separate words
if (!is.null(sep_words)) {x[i] <- gsub(sep_words,' ',x[i])}
# capitalize
if (capitalize == 'all') {x[i] <- toupper(x[i])}
if (capitalize == 'none') {x[i] <- tolower(x[i])}
if (capitalize == 'first') {
x[i] <- paste0(
toupper(substr(x[i],1,1)),
tolower(substr(x[i], 2, nchar(x[i])))
)
}
}
x0
x[i]
?all.equal
all.equal(x0,x[i])
'NA'== 'NA'
x <- NA
# convert to string if it's not
if (class(x) != 'character') {
x <- as.character(x)
}
# loop through each string
for (i in seq(length(x))) {
# cap string
if (!is.null(cap)) {
x0 <- substr(x[i],1,cap-3)
# add ... if text was capped
if (x0 != x[i]) {
x[i] <- paste0(x0, '...')
} else {x[i] <- x0}
}
# separate words
if (!is.null(sep_words)) {x[i] <- gsub(sep_words,' ',x[i])}
# capitalize
if (capitalize == 'all') {x[i] <- toupper(x[i])}
if (capitalize == 'none') {x[i] <- tolower(x[i])}
if (capitalize == 'first') {
x[i] <- paste0(
toupper(substr(x[i],1,1)),
tolower(substr(x[i], 2, nchar(x[i])))
)
}
}
x0
class(x0)
x[i]
class(x[i])
x0[1]
x[i][1]
class(x[i][1])
x[i][1][1]
x0==x[i]
is.na(x0==x[i])
library(myR)
getQuery("select max(date_key) from dtmsal.wvfe_sales_order_dlvrd_eudw")
