{
    "collab_server" : "",
    "contents" : "#' executes a query to an oracle database\n#'\n#' @param query_string character. can be either a sql query, the path to an sql file or the name of a table (the latter one detected by the presence of a single word in the string)\n#' @param ora_file character. Location to the tnsnames.ora file. If NULL (default), script will look for it in\n#'      \"C:\\\\OracleClient\\\\tnsnames.ora\" or in \"~/.tnsnames.ora\"\n#' @param access_file list or character. Either a list with fields username and password, either a character string indicating the location of the file. If NULL (default) the script will look for the file .access_db.yaml in the home directory\n#' @param network_alias character. If tnsnames.ora file has more than one connection, which network_alias should it use? Default is EDWPDEV\n#' @param sample_table integer. Whether to query a sample of a table. Default is 3\n#' @param quiet logical. Be silent? Defauls is FALSE\n#' @return the output of the query as a data.table object\n#' @details You can also insert data into a table by passing an insert query and a data structure to your input files (see example below)\n#' @examples\n#'  getQuery(\"select * from MYTABLE\")\n#'  getQuery(\"sql/my_query.sql\")\n#'  getQuery(\"insert into TABLE_NAME values(:1, :2)\", data = ds)\n#' @author Henrique Cabral\n#' @export\n\ngetQuery <- function(query_string,\n    ora_file = NULL,\n    access_file = NULL,\n    network_alias = 'EDWPDEV',\n    sample_table = 3,\n    quiet = FALSE,\n    ...\n) {\n\n    # time process\n    time1 <- Sys.time()\n\n    # check if query_string is a file\n    file_exists <- file.exists(query_string)\n\n    # check if sample_table\n    if (length(strsplit(query_string,' ')[[1]]) == 1 & !file_exists) {\n        query_string <- sprintf(\n            \"select * from %s where rownum < %d\",\n            query_string,\n            sample_table\n        )\n    } else if (file_exists) { # check if query_string is file and read if so\n        query_string <- paste(readLines(query_string),collapse = '\\n')\n    }\n\n    if (!quiet){\n        # print message\n        cat(query_string)\n        cat('\\n')\n    }\n    print('querying data....')\n\n    # find ora file\n    if (is.null(ora_file)) {\n        if (file.exists('C:\\\\OracleClient\\\\tnsnames.ora')) {\n            ora_file <- 'C:\\\\OracleClient\\\\tnsnames.ora'\n        } else if (file.exists(paste0(Sys.getenv(\"HOME\"),'/.tnsnames.ora'))) {\n            ora_file <- paste0(Sys.getenv(\"HOME\"),'/.tnsnames.ora')\n        } else {\n            error('Please provide an tnsnames.ora file location')\n        }\n    }\n\n    # find credentials file\n    if (is.null(access_file) & !is.list(access_file)) {\n        if (file.exists(paste0(Sys.getenv(\"HOME\"),'/.access_db.yaml'))) {\n            access_file <- paste0(Sys.getenv(\"HOME\"),'/.access_db.yaml')\n        } else {\n            error('Please provide an .access_db.yaml file location')\n        }\n    }\n\n    # load file, if it's a string\n    if (is.character(access_file)) {\n        access_file <- yaml::yaml.load_file(access_file)\n    }\n\n    # validate credentials\n    if (!is.list(access_file)) {\n        stop('Please provide a valid credentials file object')\n    } else if (sum(c('username','password') %in% names(access_file)) != 2) {\n        stop('Credentials file must contain fields <username> and <password>')\n    }\n\n    # read connection\n    dbname  <- utils::read.delim(ora_file)\n    dbname <- strwrap(paste(dbname[[1]], collapse = ''),1000)\n\n    # check if there are more than one connection and split, if so\n    db_split <- strsplit(dbname, ')))')[[1]]\n    if (length(db_split) > 1) {\n        id_network_alias <- grep(network_alias,db_split)\n        if (!length(id_network_alias)) {\n            stop('Network alias not found in tnsnames.ora file')\n        } else if (length(id_network_alias) > 1) {\n            stop('Multiple network alias found in tnsnames.ora file')\n        } else {\n            dbname <- paste0(db_split[id_network_alias], ')))')\n        }\n    }\n\n    # set driver\n    drv <- ROracle::Oracle()\n\n    # make connection\n    con <- ROracle::dbConnect(\n        drv,\n        username = access_file$username,\n        password = access_file$password,\n        dbname = dbname\n    )\n\n        # make query\n    df <- ROracle::dbGetQuery(con, query_string, ...)\n\n    # convert to data.table and return\n    df <- data.table::as.data.table(df)\n\n    # lower case columns\n    data.table::setnames(df, tolower(colnames(df)))\n\n    # disconnect\n    ROracle::dbDisconnect(con)\n\n\n    if (!quiet) {\n        # time process\n        dt <- difftime(Sys.time(),time1, units = 'secs')\n        if (dt > 60) {units(dt) <- 'mins'}\n        print(sprintf('done in %0.2f %s',as.numeric(dt), units(dt)))\n    }\n\n    return(df)\n}\n",
    "created" : 1484046242793.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1921883420",
    "id" : "4F9CCF45",
    "lastKnownWriteTime" : 1486044888,
    "last_content_update" : 1486044888464,
    "path" : "~/R/myR/R/getQuery.R",
    "project_path" : "R/getQuery.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}