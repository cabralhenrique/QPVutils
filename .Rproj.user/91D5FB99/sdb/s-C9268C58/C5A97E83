{
    "collab_server" : "",
    "contents" : "\n#' Function to remove non-UTF8 characters\n#'\n#' @param x character vector.\n#' @return character vector\n#' @examples rmNonUTF8('hell\\023o')\n#' @author Henrique Cabral\n#' @export\nrmNonUTF8 <- function(x) {\n\n    # set encoding to UTF-8\n    Encoding(x) <- 'UTF-8'\n\n    # convert character between encodings and set unknowns to ''\n    x <-  iconv(x, \"UTF-8\", \"UTF-8\",sub='')\n\n    # check for further unknown characters and remove them\n    bad_enc <- c(\n        '\\001','\\002','\\003','\\004','\\005','\\006','\\007',\n        '\\016','\\017','\\018','\\019','\\020','\\021','\\022','\\023','\\024','\\025',\n        '\\026','\\027','\\028','\\029','\\030','\\031','\\032','\\033','\\034','\\035',\n        '\\036','\\037','\\038','\\039','\\048','\\049','\\058','\\059','\\068','\\069',\n        \"[\\\\]\",'/bx'\n    )\n    x <- gsub(paste(bad_enc, collapse = '|'),\"\",x)\n    # for (be in bad_enc) {\n    #     x <- gsub(be,\"\",x)\n    # }\n\n    return(x)\n\n}\n\n\n#' Function to keep only alphanum characters\n#'\n#' @param x string.\n#' @param replace string. replace non alpha-num characters with it. default = ''\n#' @return character vector\n#' @examples keepAlphaNum('hello.baby')\n#' @author Henrique Cabral\n#' @export\nkeepAlphaNum <- function(x, replace = '') {\n\n   # keep only alphanumeric charactes\n    x <- gsub('[^[:alnum:]]','',x)\n\n    # remove unwanted characters (accents, cedila)\n    x <- iconv(x, to='ASCII//TRANSLIT')\n\n    return(x)\n\n}\n\n#' Function to convert number to words\n#'\n#' @param x numeric vector or character vector with digits.\n#' @return character vector\n#' @examples num2word('245885')\n#' @author Henrique Cabral\n#' @export\nnum2word <- function(x) {\n\n    # convert to character if needed\n    if (!is.character(x)) {\n        x <- as.character(x)\n    }\n\n    # split into individual numbers\n    x <- strsplit(x,'')[[1]]\n\n    # for each number, get the corresponding letter of the alphabet\n    # (add one for 0)\n    paste(sapply(x, function(x) letters[as.numeric(x) + 1]), collapse = '')\n}\n\n#' Function to make link in pdf file\n#'\n#' @param x Name to be displayed in link\n#' @param x_link if missing, x is used\n#' @param cap numeric. truncate x to CAP characters\n#' @param target logical. is link FALSE. or link target (TRUE, default)\n#' @param prefix character. add prefix to make link unique\n#' @param type characte. markdown/excel (XLConnect format)\n#' @param keep_alphanum logical. Remove non-alphanumeric characters(default: TRUE)\n#' @return character vector\n#' @examples myLinker('hellothere', x_link = 'hello_link', cap = 5)\n#' @author Henrique Cabral\n#' @export\nmyLinker <- function(\n    x,\n    x_link = NULL,\n    cap = NULL,\n    target = F,\n    prefix = NULL,\n    type = 'markdown',\n    keep_alphanum = TRUE\n    ) {\n\n    # check if a link is provided and keep only alpha numeric characters\n    sub_pattern <- ifelse(keep_alphanum, \"[^[:alnum:]]\", \"\")\n    if (!is.null(x_link)) {\n        x_alpha_num <- gsub(sub_pattern, \"\", x_link)\n    } else {\n        x_alpha_num <- gsub(sub_pattern, \"\", x)\n    }\n\n    # add prefix\n    if (!is.null(prefix)){\n        x_alpha_num <- paste0(prefix,x_alpha_num)\n    }\n\n    if (is.null(cap)) { # define cap length of name\n        cap <- nchar(as.character(x))\n    }\n\n    if (! target){\n        if (type == 'markdown') {\n            sprintf(\n                '[%s](#%s)',\n                substr(x, 1, cap),\n                x_alpha_num\n            )\n        } else if (type == 'excel') {\n            sprintf(\n                'HYPERLINK(\"#%s!A1\",\"%s\")',\n                x_alpha_num,\n                substr(x, 1, cap)\n            )\n        }\n\n    } else {\n        sprintf(\n            '%s {#%s}',\n            substr(x, 1, cap),\n            x_alpha_num\n        )\n    }\n}\n\n#' Function to format text for pretty display\n#'\n#' @param x string or vector of strings.\n#' @param cap integer. max number of characters. Default = 20\n#' @param capitalize character. one of 'all','none','first' (default)\n#' @param sep_words character. separate words. Default = '_' (use NULL not to separate)\n#' @return string or vector of strings.\n#' @examples formatText('hello', capitalize = 'none')\n#' @author Henrique Cabral\n#' @export\nformatText <- function(x, cap = NULL, capitalize = 'first', sep_words = '_') {\n\n    # convert to string if it's not\n    if (class(x) != 'character') {\n        x <- as.character(x)\n    }\n\n    # loop through each string\n    for (i in seq(length(x))) {\n        # cap string\n        if (!is.null(cap)) {\n            x0 <- substr(x[i],1,cap-3)\n            # add ... if text was capped\n            if (x0 != x[i] | is.na(x0 != x[i])) {\n                x[i] <- paste0(x0, '...')\n            } else {x[i] <- x0}\n        }\n\n        # separate words\n        if (!is.null(sep_words)) {x[i] <- gsub(sep_words,' ',x[i])}\n\n        # capitalize\n        if (capitalize == 'all') {x[i] <- toupper(x[i])}\n        if (capitalize == 'none') {x[i] <- tolower(x[i])}\n        if (capitalize == 'first') {\n            x[i] <- paste0(\n                toupper(substr(x[i],1,1)),\n                tolower(substr(x[i], 2, nchar(x[i])))\n                )\n        }\n    }\n\n    return(x)\n}\n\n#' Function to format column names\n#'\n#' @param x string. vector of names\n#' @param cap_all logical. Capitalize all words or only first one? Default is TRUE\n#' @return x with replaced '_' and capitalized first letter(s)\n#' @examples formatColumnNames('my_column_name')\n#' @author Henrique Cabral\n#' @export\nformatColumnNames <- function(x, cap_all = TRUE) {\n\n    # loop through each element\n    for (i in seq(length(x))) {\n        # split by '_'\n        x0 <- strsplit(x[i], '_')[[1]]\n        if (cap_all) { # capitalize all first letters\n            for (j in seq(length(x0))) {\n                x0[j] <- paste0(\n                    toupper(substr(x0[j],1,1)),\n                    substr(x0[j],2, nchar(x0[j]))\n                )\n            }\n        } else { # capitalize first word\n            x0[1] <- paste0(\n                toupper(substr(x0[1],1,1)),\n                substr(x0[1],2, nchar(x0[1]))\n            )\n        }\n        # collapse together\n        x[i] <- paste(x0, collapse = ' ')\n    }\n\n    return(x)\n\n}\n",
    "created" : 1479483125240.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "821193930",
    "id" : "C5A97E83",
    "lastKnownWriteTime" : 1486111029,
    "last_content_update" : 1486111029086,
    "path" : "~/R/QPV_utils/R/textUtils.R",
    "project_path" : "R/textUtils.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}